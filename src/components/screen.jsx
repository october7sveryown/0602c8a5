/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/FZFGz1sf4Rq
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";

import ActivityCard from "@/components/ActivityCard";
import { useState, useEffect } from "react";
import axios from "axios";
import Header from "./Header";
import Footer from "./Footer";
import Container from "./Container";
import { BASE_URL } from "../lib/helpers";
import { ArchiveIcon } from "lucide-react";
import { useToast } from "@/components/ui/use-toast"

export function Screen() {
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [updating, setUpdating] = useState(false);
  const {toast} = useToast();


  const fetchActivities = async () => {
    try {
      const response = await axios.get(
        BASE_URL
      );
      setActivities(response.data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchActivities();
  }, []);

  if (loading) return <div className="flex flex-grow items-center justify-center">Loading...</div>;
  if (error) return <div className="flex flex-grow items-center justify-center">Error: {error}</div>;


  const updateCall = async (call) => {
    try {
      await axios.patch(BASE_URL+ call.id, {
        ...call,
        is_archived: true
      });
    } catch (error) {
      console.error('Error updating call:', error);
    }
  };


  const updateAllCalls = async () => {
    try {
      await Promise.all(activities.map(call => updateCall(call)));
      fetchActivities();
      toast({
        title: "Calls updated",
      })
    } catch (error) {
      console.error('Error updating all calls:', error);
      alert('Failed to update all calls');
    } finally {
      setUpdating(false);
    }
  };

  if (updating) return <div className="flex flex-grow items-center justify-center">Updating...</div>;

  const myActivities = activities.filter(activity => !activity.is_archived);

  return (
    <>
      <main className="p-4 h-96 flex-grow overflow-y-auto">
        {
          myActivities.length > 0 ? (
            <Button variant="default" className="w-full mb-4" onClick={()=>updateAllCalls()}>
          <ArchiveIcon className="w-5 h-5 mr-2" />
          Archive all calls
        </Button>
          ) : <div className="flex flex-grow items-center justify-center">No data yet..</div>
        }
        <div className="space-y-4">
          <ActivityCard activities={myActivities} />
        </div>
        
      </main>
      
      </>
  );
}
